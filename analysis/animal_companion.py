"""
	Input: csv generated by summon_impact
	Output: csvs for summoned minions by turn and opponent hero
"""

import sys
import os
import csv
import math
from collections import defaultdict
from hearthstone import cardxml

db, _ = cardxml.load()


class GameData:
	def parse_line(self, line):
		parts = line.split(",")[1:]
		self.player_hero = db[parts[0]].card_class.name.title()
		self.opponent_hero = db[parts[1]].card_class.name.title()
		self.won = parts[2] == "TRUE"
		self.first_player = parts[3] == "TRUE"
		self.turn = int(parts[4])
		self.total_turns = int(parts[5])
		self.summons = [db[x].name for x in parts[6].split("|")]
		self.region = parts[7]
		self.player_deck = parts[8].split("|")
		self.opponent_deck = parts[9].split("|")
		return self


def group_by(func, items, key_filter=(lambda x: True)):
	ret = defaultdict(lambda: [])
	for item in items:
		key = func(item)
		if key_filter(key):
			ret[key].append(item)
	return ret

def group_by_turn(games):
	return group_by(lambda x: math.floor((x.turn + 1) / 2), games, lambda x: 2 <= x <= 12)

def group_by_summon(games):
	return group_by(lambda x: x.summons[0], games)

def group_by_hero(games):
	return group_by(lambda x: x.opponent_hero, games)

def get_summon_data(games):
	by_summon = group_by_summon(games)
	for summon in by_summon.keys():
		summon_games = by_summon[summon]
		num_games = len(summon_games)
		wins = [x for x in summon_games if x.won]
		winrate = round(100.0 * len(wins)/num_games, 2)
		yield (summon, winrate, num_games)

def write_csv(subdir, name, games, group_func):
	path = "animal_companion/" + subdir
	if not os.path.exists(path):
		os.makedirs(path)
	with open(path + "/" + name + ".csv", "w") as csvfile:
		print("writing", csvfile.name, "(%s games)" % len(games))
		writer = csv.writer(csvfile, delimiter=',', lineterminator='\n')
		grouped = group_func(games)
		keys = sorted(grouped.keys())
		writer.writerow([""] + keys)
		rows = defaultdict(lambda: [])
		for key in keys:
			summon_data = list(get_summon_data(grouped[key]))
			for summon in summon_data:
				rows[summon[0]].append(summon[1])
			values = [x[1] for x in summon_data]
			rows["min"].append(min(values))
			rows["max"].append(max(values))
			rows["variance"].append(round(max(values) - min(values), 2))
		for row in sorted(rows.keys()):
			writer.writerow((row, *rows[row]))

lines = list(open(sys.argv[1], "r", encoding="utf-8"))[1:]
all_games = [GameData().parse_line(x) for x in lines]

hunter_games = [x for x in all_games if x.player_hero == "Hunter"]
by_hero = group_by_hero(hunter_games)

write_csv("by_turn", "All", list(hunter_games), group_by_turn)
for hero in by_hero.keys():
	write_csv("by_turn", hero, by_hero[hero], group_by_turn)

turn_2_3 = [x for x in hunter_games if 3 < x.turn < 7]
turn_4_6 = [x for x in hunter_games if 6 < x.turn < 13]

write_csv("by_hero", "All", list(hunter_games), group_by_hero)
write_csv("by_hero", "Turn_2-3", turn_2_3, group_by_hero)
write_csv("by_hero", "Turn_4-6", turn_4_6, group_by_hero)
